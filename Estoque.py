import streamlit as st
import pandas as pd
from supabase import create_client, Client
import datetime
from cachetools import TTLCache
from st_aggrid import AgGrid, GridOptionsBuilder, GridUpdateMode
import time

# Configura√ß√£o dos caches (TTL de 60 segundos)
cache_vendas = TTLCache(maxsize=1, ttl=60)
cache_estoque = TTLCache(maxsize=1, ttl=60)

# Configura√ß√£o do Supabase (usar secrets do Streamlit Cloud)
SUPABASE_URL = st.secrets["https://zozomnppwpwgtqdgtwny.supabase.co"]
SUPABASE_KEY = st.secrets["eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Inpvem9tbnBwd3B3Z3RxZGd0d255Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDY1NTYzMDYsImV4cCI6MjA2MjEzMjMwNn0.KcX5BOG-hiqo6baMinRuJjxmtgGKbWNZjNuzVLk9GiI"]

# Validar URL e chave
if not SUPABASE_URL or not SUPABASE_KEY:
    st.error("Erro: SUPABASE_URL ou SUPABASE_KEY n√£o est√£o definidos no secrets.toml.")
    st.stop()

# Inicializar cliente Supabase
try:
    supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)
except Exception as e:
    st.error(f"Erro ao inicializar o cliente Supabase: {e}")
    st.stop()

# Configura√ß√£o das tabelas e colunas esperadas
SUPABASE_CONFIG = {
    "vendas": {
        "table": "VWSOMELIER",
        "columns": ["CODPROD", "QT", "DESCRICAO_1", "DESCRICAO_2", "DATA"]
    },
    "estoque": {
        "table": "ESTOQUE",
        "columns": ["CODFILIAL", "CODPROD", "QT_ESTOQUE", "QTULTENT", "DTULTENT", "DTULTSAIDA", "QTRESERV", 
                    "QTINDENIZ", "DTULTPEDCC", "BLOQUEADA", "NOME_PROD"]
    }
}

# Fun√ß√£o para buscar dados do Supabase com pagina√ß√£o
@st.cache_data(show_spinner=False, ttl=60, persist="disk")
def fetch_supabase_data(cache, table, columns_expected, date_column=None):
    key = f"{table}"
    if key in cache:
        return cache[key]

    try:
        all_data = []
        offset = 0
        limit = 1000  # Limite por p√°gina do Supabase

        while True:
            response = supabase.table(table).select("*").range(offset, offset + limit - 1).execute()
            data = response.data
            if not data:
                break
            all_data.extend(data)
            offset += limit

        if all_data:
            df = pd.DataFrame(all_data)
            missing_columns = [col for col in columns_expected if col not in df.columns]
            if missing_columns:
                st.error(f"Colunas ausentes na tabela {table}: {missing_columns}")
                cache[key] = pd.DataFrame()
                return pd.DataFrame()
            if date_column and date_column in df.columns:
                df[date_column] = pd.to_datetime(df[date_column], errors='coerce')
                df = df.dropna(subset=[date_column])
            cache[key] = df
        else:
            st.warning(f"Nenhum dado retornado da tabela {table}.")
            cache[key] = pd.DataFrame()
            df = pd.DataFrame()

    except Exception as e:
        st.error(f"Erro ao buscar dados da tabela {table}: {e}")
        cache[key] = pd.DataFrame()
        df = pd.DataFrame()

    return cache[key]

# Fun√ß√£o para buscar dados de vendas (VwSomelier)
def fetch_vendas_data():
    config = SUPABASE_CONFIG["vendas"]
    df = fetch_supabase_data(cache_vendas, config["table"], config["columns"], date_column="DATA")
    if not df.empty:
        df['QT'] = pd.to_numeric(df['QT'], errors='coerce').fillna(0)
    return df

# Fun√ß√£o para buscar dados de estoque (ESTOQUE)
def fetch_estoque_data():
    config = SUPABASE_CONFIG["estoque"]
    df = fetch_supabase_data(cache_estoque, config["table"], config["columns"])
    if not df.empty:
        for col in ['QTULTENT', 'QT_ESTOQUE', 'QTRESERV', 'QTINDENIZ', 'BLOQUEADA']:
            if col in df.columns:
                df[col] = pd.to_numeric(df[col], errors='coerce').fillna(0)
        for col in ['DTULTENT', 'DTULTSAIDA', 'DTULTPEDCC']:
            if col in df.columns:
                df[col] = pd.to_datetime(df[col], errors='coerce')
    return df

# Fun√ß√£o para realizar o reload autom√°tico a cada 1 minuto
def auto_reload():
    if 'last_reload' not in st.session_state:
        st.session_state.last_reload = time.time()
    
    current_time = time.time()
    if current_time - st.session_state.last_reload >= 60:  # 60 segundos
        st.session_state.last_reload = current_time
        st.cache_data.clear()  # Limpar o cache para for√ßar nova busca
        st.rerun()  # For√ßar reload da p√°gina

# Fun√ß√£o principal
def main():
    st.set_page_config(page_title="An√°lise de Estoque e Vendas", layout="wide")
    st.title("üì¶ An√°lise de Estoque e Vendas")
    st.markdown("An√°lise dos produtos vendidos e estoque dispon√≠vel.")

    # Chamar auto_reload para verificar se precisa atualizar
    auto_reload()

    # Definir as datas de in√≠cio e fim para os √∫ltimos 2 meses (atualizado para hoje, 13/05/2025)
    data_final = datetime.date.today()  # 13/05/2025
    data_inicial = data_final - datetime.timedelta(days=60)  # 14/03/2025

    # Buscar dados de vendas (VwSomelier)
    with st.spinner("Carregando dados de vendas..."):
        vendas_df = fetch_vendas_data()

    if vendas_df.empty:
        st.warning("N√£o h√° vendas para o per√≠odo selecionado.")
    else:
        # Agrupar as vendas por produto e somar as quantidades vendidas
        vendas_grouped = vendas_df.groupby('CODPROD')['QT'].sum().reset_index()

    # Buscar dados de estoque (ESTOQUE)
    with st.spinner("Carregando dados de estoque..."):
        estoque_df = fetch_estoque_data()

    if estoque_df.empty:
        st.warning("N√£o h√° dados de estoque para o per√≠odo selecionado.")
    else:
        # Verificar se os produtos com alta venda est√£o sem estoque
        merged_df = pd.merge(vendas_grouped, estoque_df[['CODPROD', 'NOME_PROD', 'QT_ESTOQUE']], on='CODPROD', how='left')

        # Filtrando os produtos que N√ÉO possuem estoque
        sem_estoque_df = merged_df[merged_df['QT_ESTOQUE'].isna() | (merged_df['QT_ESTOQUE'] <= 0)]

        # Barra de pesquisa para c√≥digo do produto
        pesquisar = st.text_input("Pesquisar por C√≥digo do Produto ou Nome", "")

        # Renomear as colunas
        df = estoque_df.copy()
        df = df.rename(columns={
            'CODFILIAL': 'C√≥digo da Filial',
            'CODPROD': 'C√≥digo do Produto',
            'NOME_PROD': 'Nome do Produto',
            'QTULTENT': 'Quantidade √öltima Entrada',
            'QT_ESTOQUE': 'Estoque Dispon√≠vel',
            'QTRESERV': 'Quantidade Reservada',
            'QTINDENIZ': 'Quantidade Avariada',
            'DTULTENT': 'Data √öltima Entrada',
            'DTULTSAIDA': 'Data √öltima Sa√≠da',
            'DTULTPEDCC': 'Data √öltimo Pedido Compra',
            'BLOQUEADA': 'Quantidade Bloqueada'
        })

        if pesquisar:
            df = df[
                (df['C√≥digo do Produto'].astype(str).str.contains(pesquisar, case=False, na=False)) |
                (df['Nome do Produto'].str.contains(pesquisar, case=False, na=False))
            ]

        df['Quantidade Total'] = df[['Estoque Dispon√≠vel', 'Quantidade Reservada', 'Quantidade Bloqueada']].fillna(0).sum(axis=1)

        # Reordenar as colunas
        df = df.reindex(columns=[
            'C√≥digo da Filial', 'C√≥digo do Produto', 'Nome do Produto', 'Estoque Dispon√≠vel', 'Quantidade Reservada',
            'Quantidade Bloqueada', 'Quantidade Avariada', 'Quantidade Total', 'Quantidade √öltima Entrada',
            'Data √öltima Entrada', 'Data √öltima Sa√≠da', 'Data √öltimo Pedido Compra'
        ])

        # Configurar a tabela de estoque com AgGrid e larguras fixas
        st.subheader("‚úÖ Estoque")
        st.markdown("Use a barra de rolagem para ver mais linhas.")
        gb = GridOptionsBuilder.from_dataframe(df)
        gb.configure_default_column(editable=False, filter=True, sortable=True, resizable=False)
        gb.configure_column("C√≥digo da Filial", width=100)
        gb.configure_column("C√≥digo do Produto", width=120)
        gb.configure_column("Nome do Produto", width=250)
        gb.configure_column("Estoque Dispon√≠vel", width=120)
        gb.configure_column("Quantidade Reservada", width=120)
        gb.configure_column("Quantidade Bloqueada", width=120)
        gb.configure_column("Quantidade Avariada", width=120)
        gb.configure_column("Quantidade Total", width=120)
        gb.configure_column("Quantidade √öltima Entrada", width=120)
        gb.configure_column("Data √öltima Entrada", width=130)
        gb.configure_column("Data √öltima Sa√≠da", width=130)
        gb.configure_column("Data √öltimo Pedido Compra", width=130)
        gb.configure_pagination(enabled=False)
        gb.configure_grid_options(domLayout='normal')
        grid_options = gb.build()

        # Formatar n√∫meros e datas para exibi√ß√£o
        df_display = df.copy()
        for col in ['Estoque Dispon√≠vel', 'Quantidade Reservada', 'Quantidade Bloqueada', 'Quantidade Avariada', 'Quantidade Total', 'Quantidade √öltima Entrada']:
            df_display[col] = df_display[col].apply(lambda x: f"{x:,.0f}" if pd.notnull(x) else "0")
        for col in ['Data √öltima Entrada', 'Data √öltima Sa√≠da', 'Data √öltimo Pedido Compra']:
            df_display[col] = df_display[col].apply(lambda x: x.strftime('%Y-%m-%d') if pd.notnull(x) else "")

        AgGrid(
            df_display,
            gridOptions=grid_options,
            update_mode=GridUpdateMode.NO_UPDATE,
            allow_unsafe_jscode=True,
            height=400,
            theme='streamlit',
            fit_columns_on_grid_load=False
        )

        if sem_estoque_df.empty:
            st.info("N√£o h√° produtos vendidos sem estoque.")
        else:
            # Exibir a tabela com os produtos sem estoque mas vendidos
            st.subheader("‚ùå Produtos Sem Estoque com Venda nos √öltimos 2 Mesos")

            sem_estoque_df_renomeado = sem_estoque_df[sem_estoque_df['QT_ESTOQUE'].isna() | (sem_estoque_df['QT_ESTOQUE'] <= 0)]

            sem_estoque_df_renomeado = sem_estoque_df_renomeado.rename(columns={
                'CODPROD': 'C√ìDIGO PRODUTO',
                'NOME_PROD': 'NOME DO PRODUTO',
                'QT': 'QUANTIDADE VENDIDA',
                'QT_ESTOQUE': 'ESTOQUE TOTAL'
            })

            sem_estoque_df_renomeado = sem_estoque_df_renomeado[
                sem_estoque_df_renomeado['NOME_DO_PRODUTO'].notna() & 
                (sem_estoque_df_renomeado['NOME_DO_PRODUTO'] != '')
            ]

            sem_estoque_df_renomeado = sem_estoque_df_renomeado[[
                'C√ìDIGO PRODUTO', 'NOME DO PRODUTO', 'QUANTIDADE VENDIDA', 'ESTOQUE TOTAL'
            ]]

            gb = GridOptionsBuilder.from_dataframe(sem_estoque_df_renomeado)
            gb.configure_default_column(editable=False, filter=True, sortable=True, resizable=False)
            gb.configure_column("C√ìDIGO PRODUTO", width=150)
            gb.configure_column("NOME DO PRODUTO", width=300)
            gb.configure_column("QUANTIDADE VENDIDA", width=200)
            gb.configure_column("ESTOQUE TOTAL", width=200)
            gb.configure_pagination(enabled=False)
            gb.configure_grid_options(domLayout='normal')
            grid_options = gb.build()

            df_sem_estoque_display = sem_estoque_df_renomeado.copy()
            df_sem_estoque_display['QUANTIDADE VENDIDA'] = pd.to_numeric(df_sem_estoque_display['QUANTIDADE VENDIDA'], errors='coerce').fillna(0)
            df_sem_estoque_display['ESTOQUE TOTAL'] = pd.to_numeric(df_sem_estoque_display['ESTOQUE TOTAL'], errors='coerce').fillna(0)
            df_sem_estoque_display['QUANTIDADE VENDIDA'] = df_sem_estoque_display['QUANTIDADE VENDIDA'].apply(lambda x: f"{x:,.0f}")
            df_sem_estoque_display['ESTOQUE TOTAL'] = df_sem_estoque_display['ESTOQUE TOTAL'].apply(lambda x: f"{x:,.0f}")

            AgGrid(
                df_sem_estoque_display,
                gridOptions=grid_options,
                update_mode=GridUpdateMode.NO_UPDATE,
                allow_unsafe_jscode=True,
                height=300,
                theme='streamlit',
                fit_columns_on_grid_load=True
            )

if __name__ == "__main__":
    main()